#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail

# Heroku-provided params
BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"

function speak (){
  echo "-----> $(date -u '+%Y-%m-%d_%H:%M:%S') $1"
}

BLACKLIST_REGEX="^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$"
if [ -d "$ENV_DIR" ]; then
  speak "Exporting config vars"
  for e in $(ls "$ENV_DIR"); do
    echo "$e" | grep -qvE "$BLACKLIST_REGEX" &&
    export "$e=$(cat $ENV_DIR/$e)"
    :
  done
fi

WORK_DIR=/app
mkdir -p "$WORK_DIR/vendor"
mkdir -p "$WORK_DIR/vendor/bin"
mkdir -p "$WORK_DIR/vendor/ghc-libs"

PROFILE_DIR="$BUILD_DIR/.profile.d"
PROFILE_PATH="$PROFILE_DIR/stack.sh"
mkdir -p "$PROFILE_DIR"

# Usage: $ set-env key value
function set-env (){
  echo "export $1=$2" >> "$PROFILE_PATH"
}

# Usage: $ set-default-env key value
function set-default-env (){
  echo "export $1=\${$1:-$2}" >> "$PROFILE_PATH"
}

export LANG=en_US.UTF-8
export LIBRARY_PATH=$WORK_DIR/vendor/ghc-libs:/usr/lib:$LIBRARY_PATH
export LD_LIBRARY_PATH=$LIBRARY_PATH
export PATH=$WORK_DIR/.local/bin:$WORK_DIR/vendor/bin:$PATH

########## gmp #####################################################
LIBGMP_VER=${LIBGMP_VER:-6.0.0a}
LIBGMP_URL=${LIBGMP_URL:-https://s3.amazonaws.com/heroku-ghc/heroku-libgmp-"$LIBGMP_VER".tar.gz}
LIBGMP_DIR="$CACHE_DIR/libgmp-$LIBGMP_VER"
if [ ! -e "$LIBGMP_DIR" ]; then
  speak "Installing libgmp-$LIBGMP_VER into cache"
  mkdir -p "$LIBGMP_DIR"
  curl -# -L "$LIBGMP_URL" | tar xz -C "$LIBGMP_DIR"
fi
speak "Restoring $LIBGMP_VER files from cache"
find "$LIBGMP_DIR/ghc-libs/" -exec cp -rP '{}' "$WORK_DIR/vendor/ghc-libs/" \;

########## stack exe ###############################################
STACK_VER=${STACK_VER:-0.1.4.0}
STACK_URL=${STACK_URL:-https://github.com/commercialhaskell/stack/releases/download/v"$STACK_VER"/stack-"$STACK_VER"-x86_64-linux.gz}
STACK_EXE="$CACHE_DIR/stack-$STACK_VER"
if [ ! -e "$STACK_EXE" ]; then
  speak "Downloading stack-$STACK_VER"
  curl -# -L "$STACK_URL" | gunzip > "$STACK_EXE"
fi
speak "Restoring stack-$STACK_VER"
cp -P "$STACK_EXE" "$WORK_DIR/vendor/bin/stack"
chmod a+x "$WORK_DIR/vendor/bin/stack"

########## stack dir ###############################################
STACK_DIR="$CACHE_DIR/.stack"
if [ -e "$STACK_DIR" ]; then
  speak "Restoring .stack"
  cp -rP "$STACK_DIR" "$WORK_DIR"
fi

########## project build ###########################################
speak "Running stack"
cd "$BUILD_DIR"
stack setup
stack build --copy-bins

if [ ! -e "$STACK_DIR" ]; then
  speak "Caching .stack"
  cp -rP "$WORK_DIR/.stack" "$CACHE_DIR"
fi

# Set context environment variables.
set-env PATH "/app/.local/bin:$PATH"
set-default-env LIBRARY_PATH /app/vendor/ghc-libs:/usr/lib
set-default-env LD_LIBRARY_PATH /app/vendor/ghc-libs:/usr/lib

speak "Making stack binaries available"
mkdir -p "$BUILD_DIR/vendor"
mkdir -p "$BUILD_DIR/.local"
mv "$WORK_DIR/vendor/ghc-libs" "$BUILD_DIR/vendor"
mv "$WORK_DIR/.local/bin" "$BUILD_DIR/.local"
